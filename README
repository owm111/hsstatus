hsstatus

SIMPLIFICATION IN PROGRESS

After writing a similarly-capable plain C statusline, I see that there is a lot
that can be simplified. In theory, memory usage can be brought down by tenfold.
Some features and flexibilities will probably be removed at least temporarily.

- Fields' status' are only Strings or ByteStrings.
- Status' are stored in individual IORefs or TVars.
- Printing is triggered by a QSem or TSem.
- Format function should also print.
- Simplify the field type: (nothing special for inotify or timers, at least not
    yet, they might improve performance, but simplicity is the goal for now)

        Field :: QSem -> IORef String -> IO ()
- Battery just works on a timer.
- Battery just reads capacity.
- Use the built-in poll descriptors instead of alsactl.

Experimental status monitor (built for personal use). The goal is to provide
event-based monitoring for use in a status bar while remaining light-weight.
With optimal RTS options and format function, hsstatus with dzen uses about 70%
of the memory that a similarly-configured xmobar (xmobar does not run or compile
with these RTS options by default; without them, it uses about double the CPU
time). However, stability and portability are currently very poor: no
guarentees it will not crash or even work.

hsstatus provides only a library, so the user is responsible for compiling the
executable (through Nix, Cabal, Stack, etc.). This should be similar to custom
builds of xmonad or xmobar, but without auto-recompilation. These executables
depend on hsstatus (which is not Hackage or Stackage), bytestring (strict
ByteStrings are used for I/O), and time (for formatting time); something like
superbuffer or strict-bytestring-builder may improve performance. CPU use can
be significantly decreased by using the RTS option -I0 (disable idle garbage
collection; since hsstatus is idle most of the time, it performs many
unnecessary collections; xmobar receives similar benefits from this option),
and memory usage could possibly be decreased by lowering -kc, -kb, and -A.

When used in xmonad, restarting or quitting xmonad causes the alsactl process to
not be cleaned up and thus orphaned. This can be fixed by prefixing the command
that spawns hsstatus (e.g. statusBar "hsstaus | dzen2" ...) with

    trap 'pkill -s0 -INT .' EXIT;

TODO

- Tests
- Benchmarks
- Documentation
- Better handleReader (option to not quit on EOF)
- Better process-based fields (handle exiting and restarting?)
- Optimize time-based fields (unifying timers?)
- Optimize Alsa field
- Optimize time field
- Optimize starters
- Optimize main
- Exception handling for watchers
- Exception handling for other general actions
- Exception handling for the main function
- Optimize data types
- Inlining and/or specialization (compiled/optimized main should ideally be one
    static call to fork fields)
- Possibily replace Field constructors with, e.g., seperate functions or a
    typeclass
- Clean Utils.hs
- Check performance of other libraries/types, e.g., for I/O and text
- Check impact of different RTS options, primarily for memory
